#!/bin/bash
# shebang

# this script is used to create a new user

# https://learning.oreilly.com/library/view/linux-for-system/9781803247946/B18575_07.xhtml#_idParaDest-103


# This is the start of an if statement that checks whether the EUID is not equal 0. (if it is run by root)
if [[ $EUID -ne 0 ]]; then
# If the user is not root, then it will print an error message to the user
  echo "This script must be run as root"
# It will exit with a code of 1 if there was an error
  exit 1
# this is the end of the if statement
fi

# This function is used to display some usage information to the user
usage() {
# provides a message to the user. $0 will be the name of the script
  echo "Usage: sudo $0 -u username -s shell -h user_home_directory [-g other_groups]"
# info for the user to understand. will print each of the options and a brief explanation.
  echo "Options: "
  echo " -u:  specifies the username"
  echo " -s:  Specifies the shell"
  echo " -h:  Specifies the user's home directory"
  echo " -g:  Optional: Add user to additional groups"
# Returns an exit code indicatng an error
  exit 1
# end of function
}

# Parse command-line options using getopts
# ':' after the characters will specify that the option requires an argument
while getopts ":u:s:h:g:" opt; do
  case ${opt} in
# OPTARG holds passed in argument for that current option
# Assign the arguments. ex) -u to USERNAME
# same idea for the others...
    u)
      username=${OPTARG}
      ;;
    s)
      shell=${OPTARG}
      ;;
    h)
      home_dir=${OPTARG}
      ;;
    g)
      groups=${OPTARG}
      ;;
# if a user passes in an argument that is incorrect and does not matchany of the options, wilcard will be triggered meaning that the system will show the user the correct syntax
    *)
      usage
      ;;
     esac
#end of getopts
done

# Ensures that the user has provided a username
if [ -z "${username}" ]; then
# will display an error message to the user
  echo "There was an Error, username is required"
# will call the usage instructions
  usage
# end of if statement
fi
  
# If the user doesn't specify a home directory,it will set default to /home/username
if [ -z "${home_dir}" ]; then
# default home directory path
  home_dir=/home/${username}  
# end of if statement
fi

# this will set a default shell
if [[ -z "${shell}" ]]; then
  shell="/bin/bash"
  echo "You did not specify the shell. Default shell will be used: ${shell}"
# end of if statmement
fi

# This will create a user with the specified shell and home directory
useradd -m -d "${home_dir}" -s "${shell}" "${username}"

# This if statement will check to see if the user was successfully created
if [ $? -ne 0 ]; then
# Print an error letting the user know the user was not created
  echo "Failed to create the user ${username}"
# indicates an error
  exit 1
# if statement finished
fi

# Copy the contents of /etc/skel to "${home_directory}
cp -r /etc/skel/ "${home_directory}"

# if specified, it will add user to additional groups
if [ ! -z "${groups}" ]; then
# this line will append user to the specified group without removing them from others
  usermod -aG "${groups}" "${username}"
fi

# this will change the ownership from home_directory to username
chown -R "${username}":"${username}" "${home_directory}"

# prints a message instructing to set up a password for user
echo "Set a password: "
# runs passwd command for new user
passwd "$username"

# success message for the user
echo "User ${username} was created successfully. Home directory ${home_directory}. Shell ${shell}."
